version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: uninoteshub_postgres_prod
    environment:
      POSTGRES_DB: uninoteshub
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d uninoteshub"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: uninoteshub_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: uninoteshub_minio_prod
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Create MinIO bucket
  minio-setup:
    image: minio/mc:latest
    container_name: uninoteshub_minio_setup_prod
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/uninoteshub-files;
      /usr/bin/mc policy set public myminio/uninoteshub-files;
      exit 0;
      "

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: uninoteshub_backend_prod
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/uninoteshub
      
      # Redis
      - REDIS_URL=redis://redis:6379/0
      
      # S3 Storage (use AWS S3 or MinIO)
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}  # Empty for AWS S3
      - S3_BUCKET=${S3_BUCKET:-uninoteshub-files}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-${MINIO_ROOT_USER}}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-${MINIO_ROOT_PASSWORD}}
      - S3_REGION=${S3_REGION:-us-east-1}
      
      # JWT
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET is required}
      - JWT_ACCESS_TTL=${JWT_ACCESS_TTL:-900}
      - JWT_REFRESH_TTL=${JWT_REFRESH_TTL:-604800}
      
      # CORS
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      
      # Email Configuration - supports both SMTP and AWS SES
      - EMAIL_PROVIDER=${EMAIL_PROVIDER:-smtp}
      
      # SMTP Settings
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST:-}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT:-587}
      - EMAIL_USER=${EMAIL_USER:-}
      - EMAIL_PASS=${EMAIL_PASS:-}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-true}
      
      # AWS SES Settings (if using EMAIL_PROVIDER=ses)
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - SES_REGION=${SES_REGION:-}
      - SES_FROM_EMAIL=${SES_FROM_EMAIL:-}
      
      # Application
      - ENVIRONMENT=production
      - DEBUG=false
      
      # Rate Limiting
      - RATE_LIMIT_LOGIN_ATTEMPTS=${RATE_LIMIT_LOGIN_ATTEMPTS:-5}
      - RATE_LIMIT_LOGIN_WINDOW=${RATE_LIMIT_LOGIN_WINDOW:-900}
      - RATE_LIMIT_UPLOAD_PER_HOUR=${RATE_LIMIT_UPLOAD_PER_HOUR:-10}
      - RATE_LIMIT_DOWNLOAD_PER_HOUR=${RATE_LIMIT_DOWNLOAD_PER_HOUR:-100}
      
      # File Upload
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-20971520}
      - ALLOWED_FILE_TYPES=${ALLOWED_FILE_TYPES:-application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document}
      
      # Admin
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@uninoteshub.com}
      
      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: uninoteshub_frontend_prod
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped

  # Reverse Proxy (optional, if you want a separate nginx for load balancing)
  # nginx:
  #   image: nginx:alpine
  #   container_name: uninoteshub_nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #     - backend
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: uninoteshub_network_prod
